plugins {
	id 'fabric-loom' version '0.5.42'
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "1.4.10"
	id 'com.github.johnrengelman.shadow' version '6.1.0'
	id "com.modrinth.minotaur" version "1.1.0"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
def ENV = System.getenv()
version = "local"
if (ENV.VERSION) {
	version = ENV.VERSION
}

//version = project.mod_version + "." + version
group = project.maven_group

import com.modrinth.minotaur.TaskModrinthUpload

minecraft {
}

compileKotlin {
    kotlinOptions {
	    jvmTarget = "1.8"
	}
}

configurations {
	shade
	implementation.extendsFrom shade

	modShade
	modImplementation.extendsFrom modShade
}

repositories {
	jcenter()
	maven {
		name = 'Vankka'
		url = 'https://nexus.vankka.dev/repository/maven-public/'
	}
	maven {
		name = 'sonatype-oss'
		url = 'https://oss.sonatype.org/content/repositories/snapshots/'
	}
    maven {
        name = "Ladysnake Libs"
        url = 'https://dl.bintray.com/ladysnake/libs'
    }
}

sourceSets {
	scriptApi {
		compileClasspath += main.compileClasspath
	}

	main {
		compileClasspath += scriptApi.output
		runtimeClasspath += scriptApi.output
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
	include "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	modRuntime "io.github.prospector:modmenu:${project.modmenu_version}"

	shade("net.dv8tion:JDA:${project.jda_version}") {
		exclude module: 'opus-java'
	}

    // Cardinal Components
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_components_version}"
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_components_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_components_version}"

//	shade('com.vdurmont:emoji-java:5.1.1')

	shade 'dev.vankka:MCDiscordReserializer:4.0.0'
	shade 'dev.vankka:SimpleAST:2.2.4-SNAPSHOT'
	modImplementation 'net.kyori:adventure-platform-fabric:4.0.0-SNAPSHOT'
	include 'net.kyori:adventure-platform-fabric:4.0.0-SNAPSHOT'
	include 'ca.stellardrift:colonel:0.1'
	include 'net.kyori:adventure-api:4.2.0'
	include 'net.kyori:adventure-platform-api:4.0.0-SNAPSHOT'
	include 'net.kyori:adventure-text-feature-pagination:4.0.0-SNAPSHOT'
	include 'net.kyori:adventure-text-serializer-gson:4.2.0'
	include 'net.kyori:adventure-text-serializer-plain:4.2.0'

	shade "club.minnced:discord-webhooks:${project.webhooks_version}"
	shade "com.uchuhimo:konf-toml:${project.konf_version}"

	shade "org.mozilla:rhino:1.7.13"
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
	from sourceSets.main.output, sourceSets.scriptApi.output
}

shadowJar {
	from "LICENSE"
	from sourceSets.main.output, sourceSets.scriptApi.output

	configurations = [ project.configurations.shade, project.configurations.modShade ]
	classifier = "dev-all"
	exclude("kotlin/**", 'kotlinx/**', 'javax/**', "META-INF")
	exclude 'org/checkerframework/**', 'org/jetbrains/**', 'org/intellij/**'
	exclude 'com/google/gson/**'
	exclude 'net/kyori/**'

	def relocPath = 'me.geek.tom.serverutils.libs.'
	relocate 'com.iwebpp.crypto', relocPath + 'com.iwebpp.crypto'
	relocate 'net.dv8tion.jda', relocPath + 'net.dv8tion.jda'
	relocate 'com.neovisionaries', relocPath + 'com.neovisionaries'
	relocate 'okhttp3', relocPath + 'okhttp3'
	relocate 'okio', relocPath + 'okio'
	relocate 'org.apache.commons.lang3', relocPath + 'org.apache.commons.lang3'
	relocate 'org.apache.commons.collections4', relocPath + 'org.apache.commons.collections4'
	relocate 'org.apache.commons.text', relocPath + 'org.apache.commons.text'
	relocate 'org.slf4j', relocPath + 'org.slf4j'
	relocate 'club.minnced.discord', relocPath + 'club.minnced.discord'
	relocate 'org.json', relocPath + 'org.json'
	relocate 'com.uchuhimo.konf', relocPath + 'com.uchuhimo.konf'
	relocate 'com.fasterxml', relocPath + 'com.fasterxml'
	relocate 'com.moandjiezana.toml', relocPath + 'com.moandjiezana.toml'
	relocate 'dev.vankka', relocPath + 'dev.vankka'
	relocate 'org.reflections', relocPath + 'org.reflections'
	relocate 'gnu.trove', relocPath + 'gnu.trove'
	relocate 'javassist', relocPath + 'javassist'
	relocate 'org.mozilla', relocPath + 'org.mozilla'
}

remapJar {
	dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
}

task publishModrinth(type: TaskModrinthUpload, dependsOn: remapJar) {
	token = ENV["MODRINTH_TOKEN"]
	projectId = 'ul4zTWk4'
	versionNumber = project.version
	uploadFile = remapJar // This is the java jar task
	addGameVersion('1.16.4')
	addLoader('fabric')
	changelog = ENV["GIT_CHANGELOG"]
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(jar) {
				builtBy remapJar
			}
			artifact("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar"){
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
